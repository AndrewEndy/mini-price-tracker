import asyncio
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from sqlalchemy.future import select
from sqlalchemy import update, text as sqltext
from sqlalchemy.orm import joinedload
from app.db import SessionLocal
from app.models import Product, Price, User
from app.bot.fsm.form_fsm import Product_review_form
from app.bot.create_bot import admins, bot
from app.bot.keyboards.reply_keyboard import main_rp_kb
from app.bot.keyboards.inline_keyboard import back_home_and_show_my_products_inline_kb, show_all_my_products_inl_kb, product_control_inline_kb
from app.utils.creating_text_about_user_products import get_text_for_one_product, get_info_product



view_router = Router()


# -----–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó —Ç–æ–≤–∞—Ä–∏-----  

# *** –ü–æ–∫–∞–∑–∞—Ç–∏ –º–æ—ó —Ç–æ–≤–∞—Ä–∏ ***  

@view_router.message(F.text == 'üëÄ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó —Ç–æ–≤–∞—Ä–∏')
async def show_my_products(message: Message, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    
    # –°—Ç–∞–≤–∏–º FSM —Å—Ç–∞–Ω –¥–ª—è –º–æ–∂–ª–∏–≤–∏—Ö –∫–Ω–æ–ø–æ–µ "–≤–ø–µ—Ä–µ–¥" —ñ "–Ω–∞–∑–∞–¥"
    await state.set_state(Product_review_form.product_review)
    
    async with SessionLocal() as session:
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ tg_id
        tg_id = message.from_user.id
        query = (
            select(Product)
            .join(User)
            .where(User.tg_id == tg_id)
            .options(joinedload(Product.prices))  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —â–æ–± –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ —Ü—ñ–Ω–∏
        )
        result = await session.execute(query)
        next_products = result.unique().scalars().all()  
        
    if next_products:
        msg = await message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(0.1)
        await msg.delete()
        
        # 11 - –º–∞–∫—Å–∏–º—É–º –º–æ–∂–ª–∏–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —â–æ–± –Ω–µ —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ (–º–∞–∫—Å –∫–Ω–æ–ø–æ–∫ - 15)
        if len(next_products) <= 11:
            await message.answer(f'–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', reply_markup=show_all_my_products_inl_kb(next_products))
        else:
            # –°—Ç–≤–æ—Ä—é—î–º –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ø–∏—Å–∫–∏, –º—ñ–∂ —è–∫–∏–º–∏ –±—É–¥–µ–º –ø–µ—Ä–µ–º—ñ—â–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏
            previous_products = [] 
            current_products = next_products[:11]
            next_products = next_products[11:]
            
            # –ü–æ–º—ñ—â–∞—î–º–æ —Ü—ñ —Å–ø–∏—Å–∫–∏ –≤ FSM –ø–∞–º'—è—Ç—å, —â–æ–± –ø–æ—Ç—ñ–º —ó—Ö –æ—Ç—Ä–∏–º–∞—Ç–∏
            await state.update_data(next_products=next_products, current_products=current_products, previous_products=previous_products)
            
            await message.answer(f'–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', reply_markup=show_all_my_products_inl_kb(current_products, next_page=True)) 
        
    else:
        await message.answer(f'–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤üòî', reply_markup=main_rp_kb(message.from_user.id))
   
    
    
@view_router.callback_query(F.data == 'show_my_products')
async def show_my_products(data: CallbackQuery, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    
     # –°—Ç–∞–≤–∏–º FSM —Å—Ç–∞–Ω –¥–ª—è –º–æ–∂–ª–∏–≤–∏—Ö –∫–Ω–æ–ø–æ–µ "–≤–ø–µ—Ä–µ–¥" —ñ "–Ω–∞–∑–∞–¥"
    await state.set_state(Product_review_form.product_review)
    await data.answer()
    await data.message.delete()
    
    async with SessionLocal() as session:
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ tg_id
        tg_id = data.from_user.id
        query = (
            select(Product)
            .join(User)
            .where(User.tg_id == tg_id)
            .options(joinedload(Product.prices))  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —â–æ–± –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ —Ü—ñ–Ω–∏
        )
        result = await session.execute(query)
        next_products = result.unique().scalars().all()
        
    if next_products:
        msg = await data.message.answer('–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', reply_markup=ReplyKeyboardRemove())
        await asyncio.sleep(0.1)
        await msg.delete()
        
        # 11 - –º–∞–∫—Å–∏–º—É–º –º–æ–∂–ª–∏–≤–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ —â–æ–± –Ω–µ —Å—Ç–∞–ª–∞—Å—å –ø–æ–º–∏–ª–∫–∞ (–º–∞–∫—Å –∫–Ω–æ–ø–æ–∫ - 15)
        if len(next_products) <= 11:
            await data.message.answer(f'–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', reply_markup=show_all_my_products_inl_kb(next_products))
        else:
            # –°—Ç–≤–æ—Ä—é—î–º –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å–ø–∏—Å–∫–∏, –º—ñ–∂ —è–∫–∏–º–∏ –±—É–¥–µ–º –ø–µ—Ä–µ–º—ñ—â–∞—Ç–∏ —Ç–æ–≤–∞—Ä–∏
            previous_products = [] 
            current_products = next_products[:11]
            next_products = next_products[11:]
            
            # –ü–æ–º—ñ—â–∞—î–º–æ —Ü—ñ —Å–ø–∏—Å–∫–∏ –≤ FSM –ø–∞–º'—è—Ç—å, —â–æ–± –ø–æ—Ç—ñ–º —ó—Ö –æ—Ç—Ä–∏–º–∞—Ç–∏
            await state.update_data(next_products=next_products, current_products=current_products, previous_products=previous_products)
            
            await data.message.answer(f'–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤', reply_markup=show_all_my_products_inl_kb(current_products, next_page=True)) 
        
    else:
        await data.message.answer(f'–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ–¥–∞–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤üòî', reply_markup=main_rp_kb(data.from_user.id))
 
    
       
@view_router.callback_query(F.data == 'next_page', Product_review_form.product_review)
async def show_my_product(data: CallbackQuery, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ'''
    await state.set_state(Product_review_form.product_review)
    await data.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º –≤—Å—ñ —Å–ø–∏—Å–∫–∏ –∑ –ø–∞–º'—è—Ç—å FSM
    state_data = await state.get_data()
    previous_products = state_data.get('previous_products')
    current_products = state_data.get('current_products')
    next_products = state_data.get('next_products')
    
    # –Ø–∫—â–æ <= 11 - –∑–Ω–∞—á–∏—Ç—å —Ü–µ –∫—Ä–∞–π–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    if len(next_products) <= 11:
        
        previous_products = previous_products + current_products
        current_products = next_products[:]
        next_products = []
        
        await bot.edit_message_reply_markup(
            chat_id=data.message.chat.id,
            message_id=data.message.message_id,
            reply_markup=show_all_my_products_inl_kb(current_products, back_page=True))
        
    # –Ø–∫—â–æ > 11 –∑–Ω–∞—á–∏—Ç—å —î —â–µ –Ω–∞—Å—Ç—É–ø–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    else:
        previous_products = previous_products + current_products
        current_products = next_products[:11]
        next_products = next_products[11:]
        
        await bot.edit_message_reply_markup(
            chat_id=data.message.chat.id,
            message_id=data.message.message_id,
            reply_markup=show_all_my_products_inl_kb(current_products, next_page=True, back_page=True))
    
    # –û–Ω–æ–≤–ª–µ–Ω—ñ —Å–ø–∏—Å–∫–∏ –¥–æ–¥–∞—î–º –¥–æ FSM –ø–∞–º'—è—Ç—ñ
    await state.update_data(next_products=next_products, current_products=current_products, previous_products=previous_products)



@view_router.callback_query(F.data == 'back_page', Product_review_form.product_review)
async def show_my_product(data: CallbackQuery, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É —Ç–æ–≤–∞—Ä—ñ–≤ –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ'''
    await state.set_state(Product_review_form.product_review)
    await data.answer()
    
    # –û—Ç—Ä–∏–º—É—î–º –≤—Å—ñ —Å–ø–∏—Å–∫–∏ –∑ –ø–∞–º'—è—Ç—å FSM
    state_data = await state.get_data()
    previous_products = state_data.get('previous_products')
    current_products = state_data.get('current_products')
    next_products = state_data.get('next_products')
    
    # –Ø–∫—â–æ <= 11 - –∑–Ω–∞—á–∏—Ç—å —Ü–µ –∫—Ä–∞–π–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∞
    if len(previous_products) <= 11:
        next_products = current_products + next_products
        current_products = previous_products[:]
        previous_products = []
        
        await bot.edit_message_reply_markup(
            chat_id=data.message.chat.id,
            message_id=data.message.message_id,
            reply_markup=show_all_my_products_inl_kb(current_products, next_page=True))
        
    # –Ø–∫—â–æ > 11 –∑–Ω–∞—á–∏—Ç—å —î —â–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
    else:
        next_products = current_products + next_products
        current_products = previous_products[-11:]
        previous_products = previous_products[:-11]
        
        await bot.edit_message_reply_markup(
            chat_id=data.message.chat.id,
            message_id=data.message.message_id,
            reply_markup=show_all_my_products_inl_kb(current_products, next_page=True, back_page=True))
    
    # –û–Ω–æ–≤–ª–µ–Ω—ñ —Å–ø–∏—Å–∫–∏ –¥–æ–¥–∞—î–º –¥–æ FSM –ø–∞–º'—è—Ç—ñ
    await state.update_data(next_products=next_products, current_products=current_products, previous_products=previous_products)
        
    

@view_router.callback_query(F.data == 'show_all_products')
async def show_all_products(data: CallbackQuery, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å –≤—Å—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤—Å—ñ —Ç–æ–≤–∞—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    await state.clear()
    await data.answer()
    await data.message.delete()
    
    async with SessionLocal() as session:
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ tg_id
        tg_id = data.from_user.id
        query = (
            select(Product)
            .join(User)
            .where(User.tg_id == tg_id)
            .options(joinedload(Product.prices))  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —â–æ–± –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–≤'—è–∑–∞–Ω—ñ —Ü—ñ–Ω–∏
        )

        result = await session.execute(query)
        products = result.unique().scalars().all()
    
    text = '<b>–û—Å—å –≤—Å—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤–∞—à—ñ —Ç–æ–≤–∞—Ä–∏</b>üßê:\n'
    
    for product in products:
        
        temp = await get_info_product(product)
        temp += '\n\n'
        
        if len(text + temp) >= 4096:
            await bot.send_message(chat_id=data.from_user.id, text=text)
            text = temp
        else:
            text += temp
    
    await bot.send_message(chat_id=data.from_user.id, text=text, reply_markup=main_rp_kb(data.from_user.id))
    


@view_router.callback_query(F.data.startswith('product_'))
async def show_user_product(data: CallbackQuery, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤–∏–≤–µ–¥–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–π —Ç–æ–≤–∞—Ä –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    
    await state.clear()
    await data.answer()
    await data.message.delete()
    
    product_id = int(data.data.replace('product_', ''))
    
    async with SessionLocal() as session:
        query = (
            select(Product)
            .join(User)
            .where(Product.product_id == product_id, User.tg_id == data.from_user.id)
            .options(joinedload(Product.prices))  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ –ø—ñ–¥–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ü—ñ–Ω–∏
        )
        result = await session.execute(query)
        product = result.scalars().first()
        
    text = await get_text_for_one_product(product)
    
    await data.message.answer(text=text, reply_markup=product_control_inline_kb(product_id))


