import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.utils.chat_action import ChatActionSender
from app.bot.fsm.form_fsm import Add_product_form
from app.bot.create_bot import admins, bot
from app.bot.keyboards.reply_keyboard import main_rp_kb
from app.bot.keyboards.inline_keyboard import inline_kb_store, back_home_inline_kb, check_name_product_inline_kb
from app.checks.check_url import check_connection_to_url, check_desired_site
from app.services import add_new_product
from app.utils.work_with_database import is_url_in_db


add_product_router = Router()


@add_product_router.callback_query(F.data.startswith('store_'))
async def add_product(data: CallbackQuery, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–∞–≥–∞–∑–∏–Ω–∞ —Ç–∞ –ø–æ—á–∞—Ç–∫—É –¥–æ–¥–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É —à–ª—è—Ö–æ–º –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è FSM —Å—Ç–∞–Ω—É'''
    await data.answer()
    await data.message.delete()
    await state.set_state(Add_product_form.waiting_for_url)
    
    store_name = data.data.replace('store_', '')
    await state.update_data(store_name=store_name) # –ü–µ—Ä–µ–¥–∞—î–º–æ –≤ FSM –Ω–∞–∑–≤—É –º–∞–≥–∞–∑–∏–Ω–∞
    
    await data.message.answer(f'–í–≤–µ–¥—ñ—Ç—å —Å–∏–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä', reply_markup=back_home_inline_kb())
    
    
@add_product_router.message(F.text, Add_product_form.waiting_for_url)
async def add_product(message: Message, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—Å—ñ—Ö –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫ —Ç–∞ –¥–æ–¥–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä—É'''
    
    async with ChatActionSender.typing(bot=bot, chat_id=message.from_user.id):
        
        connection_to_url = await check_connection_to_url(message.text) # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–æ–∂–ª–∏–≤–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –ø–æ —Å–∏–ª—Ü—ñ
        
        if connection_to_url:
            
            data = await state.get_data()
            store_name = data.get('store_name') # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞–∑–≤–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –∑ FSM —Å—Ç–∞–Ω—É
            
            flag = await check_desired_site(message.text, store_name) # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä–µ–∫—Ç–Ω—ñ—Å—Ç—å URL –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞
            if flag:
                same_url = await is_url_in_db(message.text, message.from_user.id) # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —Ç–∞–∫–∏–π URL —É–∂–µ —î –≤ user
                
                if same_url:
                    await state.clear()
                    await message.answer(f'–î–∞–Ω–∏–π —Ç–æ–≤–∞—Ä –≤–∂–µ –≤—ñ–¥—Å—Ç–µ–∂—É—î—Ç—å—Å—è', reply_markup=main_rp_kb(message.from_user.id))
                else:
                    product_id, product_name = await add_new_product(message.text, store_name, message.from_user.id)
                    await message.answer(f'–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æüëè\n<b>–ù–∞–≤–∑–∞ —Ç–æ–≤–∞—Ä—É</b>: {product_name}', reply_markup=check_name_product_inline_kb(product_id))
            else:
                await state.clear()
                await message.answer(f'–í–∏ –≤–≤–µ–ª–∏ –Ω–µ –≤—ñ—Ä–Ω—É —Å–∏–ª–∫—É!', reply_markup=main_rp_kb(message.from_user.id))
             
        else:
            await state.clear()
            await message.answer(f'–ù–µ–º–æ–∂–ª–∏–≤–æ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—å –ø–æ —Å–∏–ª—Ü—ñ!', reply_markup=main_rp_kb(message.from_user.id))
            
            
@add_product_router.message(Add_product_form.waiting_for_url)
async def foo(message: Message, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä —è–∫–∏–π —Å–ø—Ä–∞—Ü—å–æ–≤—É—î —è–∫—â–æ –≤–≤–µ–ª–∏ —â–æ—Å—å –Ω–µ —Ç–µ'''
    await message.answer(f'–í–∏ –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω—É —Å–∏–ª–∫—É!')
    await state.set_state(Add_product_form.waiting_for_url)


@add_product_router.callback_query(F.data == 'end_add_product')
async def foo(data: CallbackQuery, state: FSMContext):
    '''–•–µ–Ω–¥–ª–µ—Ä —è–∫–∏–π —Å–ø—Ä–∞—Ü—å–æ–≤—É—î —è–∫—â–æ –Ω–∞–∑–≤–∞ —Ç–æ–≤–∞—Ä—É –≤–ª–∞—à—Ç–æ–≤—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞'''
    await data.answer()
    await data.message.delete()
    await data.message.answer('–¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æüëè',reply_markup=main_rp_kb(data.from_user.id))
    await state.clear()